"use strict";
var $foreign = require("./foreign.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Prelude = require("../Prelude/index.js");
var Record_Unsafe_Union = require("../Record.Unsafe.Union/index.js");
var Type_Row = require("../Type.Row/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

// | A `Builder` can be used to `build` a record by incrementally adding
// | fields in-place, instead of using `insert` and repeatedly generating new
// | immutable records which need to be garbage collected.
// |
// | The `Category` instance for `Builder` can be used to compose builders.
// |
// | For example:
// |
// | ```purescript
// | build (insert x 42 >>> insert y "testing") {} :: { x :: Int, y :: String }
// | ```
var Builder = function (x) {
    return x;
};

// | Build by merging existing fields from another record. Unlike `merge`,
// | this does not remove duplicate labels from the resulting record type.
// | This can result in better inference for some pipelines, deferring the
// | need for a `Nub` constraint.
var union = function (dictUnion) {
    return function (r2) {
        return function (r1) {
            return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
        };
    };
};
var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;

// | Build by renaming an existing field.
var rename = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictCons) {
            return function (dictLacks) {
                return function (dictCons1) {
                    return function (dictLacks1) {
                        return function (l1) {
                            return function (l2) {
                                return function (r1) {
                                    return $foreign.unsafeRename(Data_Symbol.reflectSymbol(dictIsSymbol)(l1))(Data_Symbol.reflectSymbol(dictIsSymbol1)(l2))(r1);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};

// | A coercion which removes duplicate labels from a record's type.
var nub = function (dictNub) {
    return Unsafe_Coerce.unsafeCoerce;
};

// | Build by modifying an existing field.
var modify = function (dictCons) {
    return function (dictCons1) {
        return function (dictIsSymbol) {
            return function (l) {
                return function (f) {
                    return function (r1) {
                        return $foreign.unsafeModify(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(f)(r1);
                    };
                };
            };
        };
    };
};

// | Build by merging existing fields from another record.
var merge = function (dictUnion) {
    return function (dictNub) {
        return function (r2) {
            return function (r1) {
                return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
            };
        };
    };
};

// | Build by inserting a new field.
var insert = function (dictCons) {
    return function (dictLacks) {
        return function (dictIsSymbol) {
            return function (l) {
                return function (a) {
                    return function (r1) {
                        return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                    };
                };
            };
        };
    };
};

// | Build by merging some disjoint set of fields from another record.
var disjointUnion = function (dictUnion) {
    return function (dictNub) {
        return function (r1) {
            return function (r2) {
                return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
            };
        };
    };
};

// | Build by deleting an existing field.
var $$delete = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (l) {
                return function (r2) {
                    return $foreign.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r2);
                };
            };
        };
    };
};
var categoryBuilder = Control_Category.categoryFn;

// | Build a record, starting from some other record.
var build = function (v) {
    return function (r1) {
        return v($foreign.copyRecord(r1));
    };
};
module.exports = {
    build: build,
    insert: insert,
    modify: modify,
    "delete": $$delete,
    rename: rename,
    merge: merge,
    union: union,
    disjointUnion: disjointUnion,
    nub: nub,
    semigroupoidBuilder: semigroupoidBuilder,
    categoryBuilder: categoryBuilder
};
