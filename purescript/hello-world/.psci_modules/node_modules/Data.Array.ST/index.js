
// | Helper functions for working with mutable arrays using the `ST` effect.
// |
// | This module can be used when performance is important and mutation is a local effect.
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_ST = require("../Control.Monad.ST/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Prelude = require("../Prelude/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

// | O(1) Convert an immutable array to a mutable array, without copying. The input
// | array must not be used afterward.
var unsafeThaw = function ($11) {
    return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)($11);
};

// | O(1). Convert a mutable array to an immutable array, without copying. The mutable
// | array must not be mutated afterwards.
var unsafeFreeze = function ($12) {
    return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)($12);
};

// | Create a mutable copy of an immutable array.
var thaw = $foreign.copyImpl;

// | Perform an effect requiring a mutable array on a copy of an immutable array,
// | safely returning the result as an immutable array.
var withArray = function (f) {
    return function (xs) {
        return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(thaw(xs))(function (v) {
            return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(f(v))(function (v1) {
                return unsafeFreeze(v);
            });
        });
    };
};

// | Sort a mutable array in place using a comparison function.
var sortBy = function (comp) {
    var comp$prime = function (x) {
        return function (y) {
            var v = comp(x)(y);
            if (v instanceof Data_Ordering.GT) {
                return 1;
            };
            if (v instanceof Data_Ordering.EQ) {
                return 0;
            };
            if (v instanceof Data_Ordering.LT) {
                return -1 | 0;
            };
            throw new Error("Failed pattern match at Data.Array.ST line 85, column 15 - line 90, column 1: " + [ v.constructor.name ]);
        };
    };
    return $foreign.sortByImpl(comp$prime);
};

// | Sort a mutable array in place based on a projection.
var sortWith = function (dictOrd) {
    return function (f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};

// | Sort a mutable array in place.
var sort = function (dictOrd) {
    return sortBy(Data_Ord.compare(dictOrd));
};

// | Append an element to the end of a mutable array. Returns the new length of
// | the array.
var push = function (a) {
    return $foreign.pushAll([ a ]);
};

// | Read the value at the specified index in a mutable array.
var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Mutate the element at the specified index using the supplied function.
var modify = function (i) {
    return function (f) {
        return function (xs) {
            return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(peek(i)(xs))(function (v) {
                if (v instanceof Data_Maybe.Just) {
                    return $foreign.poke(i)(f(v.value0))(xs);
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(false);
                };
                throw new Error("Failed pattern match at Data.Array.ST line 147, column 3 - line 149, column 26: " + [ v.constructor.name ]);
            });
        };
    };
};

// | Create an immutable copy of a mutable array.
var freeze = $foreign.copyImpl;
module.exports = {
    withArray: withArray,
    peek: peek,
    push: push,
    modify: modify,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    freeze: freeze,
    thaw: thaw,
    unsafeFreeze: unsafeFreeze,
    unsafeThaw: unsafeThaw,
    empty: $foreign.empty,
    poke: $foreign.poke,
    pushAll: $foreign.pushAll,
    splice: $foreign.splice,
    toAssocArray: $foreign.toAssocArray
};
