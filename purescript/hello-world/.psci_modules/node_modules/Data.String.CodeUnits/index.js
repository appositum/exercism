"use strict";
var $foreign = require("./foreign.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_String_Pattern = require("../Data.String.Pattern/index.js");
var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");
var Prelude = require("../Prelude/index.js");

// | Returns the first character and the rest of the string,
// | if the string is not empty.
// |
// | ```purescript
// | uncons "" == Nothing
// | uncons "Hello World" == Just { head: 'H', tail: "ello World" }
// | ```
// |
var uncons = function (v) {
    if (v === "") {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just({
        head: Data_String_Unsafe.charAt(0)(v),
        tail: $foreign.drop(1)(v)
    });
};

// | Converts the string to a character, if the length of the string is
// | exactly `1`.
// |
// | ```purescript
// | toChar "l" == Just 'l'
// | toChar "Hi" == Nothing -- since length is not 1
// | ```
var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Returns the longest prefix (possibly empty) of characters that satisfy
// | the predicate.
// |
// | ```purescript
// | takeWhile (_ /= ':') "http://purescript.org" == "http"
// | ```
// |
var takeWhile = function (p) {
    return function (s) {
        return $foreign.take($foreign.countPrefix(p)(s))(s);
    };
};

// | Returns the last `n` characters of the string.
// |
// | ```purescript
// | takeRight 5 "Hello World" == "World"
// | ```
// |
var takeRight = function (i) {
    return function (s) {
        return $foreign.drop($foreign.length(s) - i | 0)(s);
    };
};

// | Returns the substring at indices `[begin, end)`.
// | If either index is negative, it is normalised to `length s - index`,
// | where `s` is the input string. `Nothing` is returned if either
// | index is out of bounds or if `begin > end` after normalisation.
// |
// | ```purescript
// | slice 0 0   "purescript" == Just ""
// | slice 0 1   "purescript" == Just "p"
// | slice 3 6   "purescript" == Just "esc"
// | slice (-4) (-1) "purescript" == Just "rip"
// | slice (-4) 3  "purescript" == Nothing
// | ```
var slice = function (b) {
    return function (e) {
        return function (s) {
            var l = $foreign.length(s);
            var norm = function (x) {
                if (x < 0) {
                    return l + x | 0;
                };
                if (Data_Boolean.otherwise) {
                    return x;
                };
                throw new Error("Failed pattern match at Data.String.CodeUnits line 314, column 5 - line 315, column 27: " + [ x.constructor.name ]);
            };
            var e$prime = norm(e);
            var b$prime = norm(b);
            var $7 = b$prime < 0 || (b$prime >= l || (e$prime < 0 || (e$prime >= l || b$prime > e$prime)));
            if ($7) {
                return Data_Maybe.Nothing.value;
            };
            return new Data_Maybe.Just($foreign._slice(b)(e)(s));
        };
    };
};

// | Returns the index of the last occurrence of the pattern in the
// | given string, starting at the specified index
// | and searching backwards towards the beginning of the string.
// | Returns `Nothing` if there is no match.
// |
// | ```purescript
// | lastIndexOf' (Pattern "a") 1 "ababa" == Just 0
// | lastIndexOf' (Pattern "a") 3 "ababa" == Just 2
// | lastIndexOf' (Pattern "a") 4 "ababa" == Just 4
// | ```
// |
var lastIndexOf$prime = $foreign["_lastIndexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Returns the index of the last occurrence of the pattern in the
// | given string. Returns `Nothing` if there is no match.
// |
// | ```purescript
// | lastIndexOf (Pattern "c") "abcdc" == Just 4
// | lastIndexOf (Pattern "c") "aaa" == Nothing
// | ```
// |
var lastIndexOf = $foreign._lastIndexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | If the string ends with the given suffix, return the portion of the
// | string left after removing it, as a `Just` value. Otherwise, return
// | `Nothing`.
// |
// | ```purescript
// | stripSuffix (Pattern ".exe") "psc.exe" == Just "psc"
// | stripSuffix (Pattern ".exe") "psc" == Nothing
// | ```
var stripSuffix = function (v) {
    return function (str) {
        var v1 = lastIndexOf(v)(str);
        if (v1 instanceof Data_Maybe.Just && v1.value0 === ($foreign.length(str) - $foreign.length(v) | 0)) {
            return Data_Maybe.Just.create($foreign.take(v1.value0)(str));
        };
        return Data_Maybe.Nothing.value;
    };
};

// | Returns the index of the first occurrence of the pattern in the
// | given string, starting at the specified index. Returns `Nothing` if there is
// | no match.
// |
// | ```purescript
// | indexOf' (Pattern "a") 2 "ababa" == Just 2
// | indexOf' (Pattern "a") 3 "ababa" == Just 4
// | ```
// |
var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Returns the index of the first occurrence of the pattern in the
// | given string. Returns `Nothing` if there is no match.
// |
// | ```purescript
// | indexOf (Pattern "c") "abcdc" == Just 2
// | indexOf (Pattern "c") "aaa" == Nothing
// | ```
// |
var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

//-----------------------------------------------------------------------------
// `stripPrefix`, `stripSuffix`, and `contains` are CodeUnit/CodePoint agnostic
// as they are based on patterns rather than lengths/indices, but they need to
// be defined in here to avoid a circular module dependency
//-----------------------------------------------------------------------------
// | If the string starts with the given prefix, return the portion of the
// | string left after removing it, as a Just value. Otherwise, return Nothing.
// |
// | ```purescript
// | stripPrefix (Pattern "http:") "http://purescript.org" == Just "//purescript.org"
// | stripPrefix (Pattern "http:") "https://purescript.org" == Nothing
// | ```
var stripPrefix = function (v) {
    return function (str) {
        var v1 = indexOf(v)(str);
        if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
            return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
        };
        return Data_Maybe.Nothing.value;
    };
};

// | Returns the suffix remaining after `takeWhile`.
// |
// | ```purescript
// | dropWhile (_ /= '.') "Test.purs" == ".purs"
// | ```
// |
var dropWhile = function (p) {
    return function (s) {
        return $foreign.drop($foreign.countPrefix(p)(s))(s);
    };
};

// | Returns the string without the last `n` characters.
// |
// | ```purescript
// | dropRight 6 "Hello World" == "Hello"
// | ```
// |
var dropRight = function (i) {
    return function (s) {
        return $foreign.take($foreign.length(s) - i | 0)(s);
    };
};

// | Checks whether the pattern appears in the given string.
// |
// | ```purescript
// | contains (Pattern "needle") "haystack with needle" == true
// | contains (Pattern "needle") "haystack" == false
// | ```
var contains = function (pat) {
    return function ($16) {
        return Data_Maybe.isJust(indexOf(pat)($16));
    };
};

// | Returns the character at the given index, if the index is within bounds.
// |
// | ```purescript
// | charAt 2 "Hello" == Just 'l'
// | charAt 10 "Hello" == Nothing
// | ```
// |
var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
module.exports = {
    stripPrefix: stripPrefix,
    stripSuffix: stripSuffix,
    contains: contains,
    charAt: charAt,
    toChar: toChar,
    uncons: uncons,
    indexOf: indexOf,
    "indexOf'": indexOf$prime,
    lastIndexOf: lastIndexOf,
    "lastIndexOf'": lastIndexOf$prime,
    takeRight: takeRight,
    takeWhile: takeWhile,
    dropRight: dropRight,
    dropWhile: dropWhile,
    slice: slice,
    singleton: $foreign.singleton,
    fromCharArray: $foreign.fromCharArray,
    toCharArray: $foreign.toCharArray,
    length: $foreign.length,
    countPrefix: $foreign.countPrefix,
    take: $foreign.take,
    drop: $foreign.drop,
    splitAt: $foreign.splitAt
};
