
// | This module defines an effect, actions and handlers for working
// | with JavaScript exceptions.
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect = require("../Effect/index.js");
var Prelude = require("../Prelude/index.js");

// | Runs an Eff and returns eventual Exceptions as a `Left` value. If the
// | computation succeeds the result gets wrapped in a `Right`.
// |
// | For example:
// |
// | ```purescript
// | main :: forall eff. Effect Unit
// | main = do
// |   result <- try (readTextFile UTF8 "README.md")
// |   case result of
// |     Right lines ->
// |       Console.log ("README: \n" <> lines )
// |     Left error ->
// |       Console.error ("Couldn't open README.md. Error was: " <> show error)
// | ```
var $$try = function (action) {
    return $foreign.catchException(function ($0) {
        return Control_Applicative.pure(Effect.applicativeEffect)(Data_Either.Left.create($0));
    })(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
};

// | A shortcut allowing you to throw an error in one step. Defined as
// | `throwException <<< error`.
var $$throw = function ($1) {
    return $foreign.throwException($foreign.error($1));
};

// | Get the stack trace from a JavaScript error
var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var showError = new Data_Show.Show($foreign.showErrorImpl);
module.exports = {
    stack: stack,
    "throw": $$throw,
    "try": $$try,
    showError: showError,
    error: $foreign.error,
    message: $foreign.message,
    name: $foreign.name,
    throwException: $foreign.throwException,
    catchException: $foreign.catchException
};
