
// | This module defines types for effectful uncurried functions, as well as
// | functions for converting back and forth between them.
// |
// | Traditionally, it has been difficult to give a PureScript type to
// | JavaScript functions such as this one:
// |
// | ```javascript
// | function logMessage(level, message) {
// |   console.log(level + ": " + message);
// | }
// | ```
// |
// | In particular, note that `logMessage` performs effects immediately after
// | receiving all of its parameters, so giving it the type `Data.Function.Fn2
// | String String Unit`, while convenient, would effectively be a lie.
// |
// | Because there has been no way of giving such functions types, we generally
// | resort to converting functions into the normal PureScript form (namely,
// | a curried function returning an Effect action), and performing the
// | marshalling in JavaScript, in the FFI module, like this:
// |
// | ```purescript
// | -- In the PureScript file:
// | foreign import logMessage :: String -> String -> Effect Unit
// | ```
// |
// | ```javascript
// | // In the FFI file:
// | exports.logMessage = function(level) {
// |   return function(message) {
// |     return function() {
// |       logMessage(level, message);
// |     };
// |   };
// | };
// | ```
// |
// | This method, unfortunately, turns out to be both tiresome and error-prone.
// | This module offers an alternative solution. By providing you with:
// |
// |  * the ability to give the real `logMessage` function a PureScript type,
// |    and
// |  * functions for converting between this form and the normal PureScript
// |    form,
// |
// | the FFI boilerplate is no longer needed. The previous example becomes:
// |
// | ```purescript
// | -- In the PureScript file:
// | foreign import logMessageImpl :: EffectFn2 String String Unit
// | ```
// |
// | ```javascript
// | // In the FFI file:
// | exports.logMessageImpl = logMessage
// | ```
// |
// | You can then use `runEffectFn2` to provide a nicer version:
// |
// | ```purescript
// | logMessage :: String -> String -> Effect Unit
// | logMessage = runEffectFn2 logMessageImpl
// | ```
// |
// | (note that this has the same type as the original `logMessage`).
// |
// | Effectively, we have reduced the risk of errors by moving as much code
// | into PureScript as possible, so that we can leverage the type system.
// | Hopefully, this is a little less tiresome too.
// |
// | Here's a slightly more advanced example. Here, because we are using
// | callbacks, we need to use `mkEffectFn{N}` as well.
// |
// | Suppose our `logMessage` changes so that it sometimes sends details of the
// | message to some external server, and in those cases, we want the resulting
// | `HttpResponse` (for whatever reason).
// |
// | ```javascript
// | function logMessage(level, message, callback) {
// |   console.log(level + ": " + message);
// |   if (level > LogLevel.WARN) {
// |     LogAggregatorService.post("/logs", {
// |       level: level,
// |       message: message
// |     }, callback);
// |   } else {
// |     callback(null);
// |   }
// | }
// | ```
// |
// | The import then looks like this:
// | ```purescript
// | foreign import logMessageImpl
// |  EffectFn3
// |    String
// |    String
// |    (EffectFn1 (Nullable HttpResponse) Unit)
// |    Unit
// | ```
// |
// | And, as before, the FFI file is extremely simple:
// |
// | ```javascript
// | exports.logMessageImpl = logMessage
// | ```
// |
// | Finally, we use `runEffectFn{N}` and `mkEffectFn{N}` for a more comfortable
// | PureScript version:
// |
// | ```purescript
// | logMessage ::
// |   String ->
// |   String ->
// |   (Nullable HttpResponse -> Effect Unit) ->
// |   Effect Unit
// | logMessage level message callback =
// |   runEffectFn3 logMessageImpl level message (mkEffectFn1 callback)
// | ```
// |
// | The general naming scheme for functions and types in this module is as
// | follows:
// |
// | * `EffectFn{N}` means, a curried function which accepts N arguments and
// |   performs some effects. The first type argument is the row of effects,
// |   which works exactly the same way as in `Effect`. The last type argument
// |   is the return type. All other arguments are the actual function's
// |   arguments.
// | * `runEffectFn{N}` takes an `EffectFn` of N arguments, and converts it into the
// |   normal PureScript form: a curried function which returns an Effect action.
// | * `mkEffectFn{N}` is the inverse of `runEffectFn{N}`. It can be useful for
// |   callbacks.
// |
"use strict";
var $foreign = require("./foreign.js");
var Effect = require("../Effect/index.js");
module.exports = {
    mkEffectFn1: $foreign.mkEffectFn1,
    mkEffectFn2: $foreign.mkEffectFn2,
    mkEffectFn3: $foreign.mkEffectFn3,
    mkEffectFn4: $foreign.mkEffectFn4,
    mkEffectFn5: $foreign.mkEffectFn5,
    mkEffectFn6: $foreign.mkEffectFn6,
    mkEffectFn7: $foreign.mkEffectFn7,
    mkEffectFn8: $foreign.mkEffectFn8,
    mkEffectFn9: $foreign.mkEffectFn9,
    mkEffectFn10: $foreign.mkEffectFn10,
    runEffectFn1: $foreign.runEffectFn1,
    runEffectFn2: $foreign.runEffectFn2,
    runEffectFn3: $foreign.runEffectFn3,
    runEffectFn4: $foreign.runEffectFn4,
    runEffectFn5: $foreign.runEffectFn5,
    runEffectFn6: $foreign.runEffectFn6,
    runEffectFn7: $foreign.runEffectFn7,
    runEffectFn8: $foreign.runEffectFn8,
    runEffectFn9: $foreign.runEffectFn9,
    runEffectFn10: $foreign.runEffectFn10
};
