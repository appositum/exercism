"use strict";
var $foreign = require("./foreign.js");
var Control_Monad_ST = require("../Control.Monad.ST/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Prelude = require("../Prelude/index.js");

// | Modify a record in place, by providing a type-level representative for the label
// | which should be updated.
var poke = function (dictCons) {
    return function (dictIsSymbol) {
        return function (l) {
            return $foreign.unsafePoke(Data_Symbol.reflectSymbol(dictIsSymbol)(l));
        };
    };
};

// | Read the current value of a field in a mutable record, by providing a
// | type-level representative for the label which should be read.
var peek = function (dictCons) {
    return function (dictIsSymbol) {
        return function (l) {
            return $foreign.unsafePeek(Data_Symbol.reflectSymbol(dictIsSymbol)(l));
        };
    };
};

// | Modify a record in place,
// | by providing a type-level representative for the label to update
// | and a function to update it.
var modify = function (dictCons) {
    return function (dictIsSymbol) {
        return function (l) {
            return $foreign.unsafeModify(Data_Symbol.reflectSymbol(dictIsSymbol)(l));
        };
    };
};
module.exports = {
    peek: peek,
    poke: poke,
    modify: modify,
    freeze: $foreign.freeze,
    thaw: $foreign.thaw
};
