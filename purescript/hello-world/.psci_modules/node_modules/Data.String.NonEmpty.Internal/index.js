"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Foldable = require("../Data.Semigroup.Foldable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String = require("../Data.String/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Pattern = require("../Data.String.Pattern/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Prelude = require("../Prelude/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

// | A string that is known not to be empty.
var NonEmptyString = function (x) {
    return x;
};

// | A newtype used in cases to specify a non-empty replacement for a pattern.
var NonEmptyReplacement = function (x) {
    return x;
};

// | A helper class for defining non-empty string values at compile time.
// |
// | ``` purescript
// | something :: NonEmptyString
// | something = nes (SProxy :: SProxy "something")
// | ```
var MakeNonEmpty = function (nes) {
    this.nes = nes;
};

// | Returns the argument converted to uppercase.
// |
// | ```purescript
// | toUpper (NonEmptyString "Hello") == NonEmptyString "HELLO"
// | ```
var toUpper = function (v) {
    return Data_String_Common.toUpper(v);
};

// | Converts a `NonEmptyString` back into a standard `String`.
var toString = function (v) {
    return v;
};

// | Returns the argument converted to lowercase.
// |
// | ```purescript
// | toLower (NonEmptyString "hElLo") == NonEmptyString "hello"
// | ```
var toLower = function (v) {
    return Data_String_Common.toLower(v);
};
var showNonEmptyString = new Data_Show.Show(function (v) {
    return "(NonEmptyString.unsafeFromString " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var showNonEmptyReplacement = new Data_Show.Show(function (v) {
    return "(NonEmptyReplacement " + (Data_Show.show(showNonEmptyString)(v) + ")");
});
var semigroupNonEmptyString = Data_Semigroup.semigroupString;
var semigroupNonEmptyReplacement = semigroupNonEmptyString;

// | Replaces all occurences of the pattern with the replacement string.
// |
// | ```purescript
// | replaceAll (Pattern "<=") (NonEmptyReplacement "≤") (NonEmptyString "a <= b <= c") == NonEmptyString "a ≤ b ≤ c"
// | ```
var replaceAll = function (pat) {
    return function (v) {
        return function (v1) {
            return Data_String_Common.replaceAll(pat)(v)(v1);
        };
    };
};

// | Replaces the first occurence of the pattern with the replacement string.
// |
// | ```purescript
// | replace (Pattern "<=") (NonEmptyReplacement "≤") (NonEmptyString "a <= b <= c") == NonEmptyString "a ≤ b <= c"
// | ```
var replace = function (pat) {
    return function (v) {
        return function (v1) {
            return Data_String_Common.replace(pat)(v)(v1);
        };
    };
};

// | Prepends a string to this non-empty string. Since one of the strings is
// | non-empty we know the result will be too.
// |
// | ```purescript
// | prependString "be" (NonEmptyString "fore") == NonEmptyString "before"
// | prependString "" (NonEmptyString "fore") == NonEmptyString "fore"
// | ```
var prependString = function (s1) {
    return function (v) {
        return s1 + v;
    };
};
var ordNonEmptyString = Data_Ord.ordString;
var ordNonEmptyReplacement = ordNonEmptyString;
var nonEmptyNonEmpty = function (dictIsSymbol) {
    return new MakeNonEmpty(function (p) {
        return Data_Symbol.reflectSymbol(dictIsSymbol)(p);
    });
};
var nes = function (dict) {
    return dict.nes;
};
var makeNonEmptyBad = function (dictFail) {
    return new MakeNonEmpty(function (v) {
        return "";
    });
};

// | Compare two strings in a locale-aware fashion. This is in contrast to
// | the `Ord` instance on `String` which treats strings as arrays of code
// | units:
// |
// | ```purescript
// | NonEmptyString "ä" `localeCompare` NonEmptyString "b" == LT
// | NonEmptyString "ä" `compare` NonEmptyString "b" == GT
// | ```
var localeCompare = function (v) {
    return function (v1) {
        return Data_String_Common.localeCompare(v)(v1);
    };
};
var liftS = function (f) {
    return function (v) {
        return f(v);
    };
};

// | Joins possibly empty strings in a non-empty container together as a new
// | non-empty string, inserting a non-empty string as a separator between them.
// | The result is guaranteed to be non-empty.
// |
// | ```purescript
// | -- array syntax is used for demonstration here, it would need to be a real `Foldable1`
// | joinWith1 (NonEmptyString ", ") ["apple", "banana"] == NonEmptyString "apple, banana"
// | joinWith1 (NonEmptyString "/") ["a", "b", "", "c", ""] == NonEmptyString "a/b//c/"
// | ```
var joinWith1 = function (dictFoldable1) {
    return function (v) {
        return function ($46) {
            return NonEmptyString(Data_Foldable.intercalate(dictFoldable1.Foldable0())(Data_Monoid.monoidString)(v)($46));
        };
    };
};

// | Joins the strings in a container together as a new string, inserting the
// | first argument as separator between them. The result is not guaranteed to
// | be non-empty.
// |
// | ```purescript
// | joinWith ", " [NonEmptyString "apple", NonEmptyString "banana"] == "apple, banana"
// | joinWith ", " [] == ""
// | ```
var joinWith = function (dictFoldable) {
    return function (splice) {
        return function ($47) {
            return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(splice)($47);
        };
    };
};

// | Joins non-empty strings in a non-empty container together as a new
// | non-empty string, inserting a possibly empty string as separator between
// | them. The result is guaranteed to be non-empty.
// |
// | ```purescript
// | -- array syntax is used for demonstration here, it would need to be a real `Foldable1`
// | join1With ", " [NonEmptyString "apple", NonEmptyString "banana"] == NonEmptyString "apple, banana"
// | join1With "" [NonEmptyString "apple", NonEmptyString "banana"] == NonEmptyString "applebanana"
// | ```
var join1With = function (dictFoldable1) {
    return function (splice) {
        return function ($48) {
            return NonEmptyString(joinWith(dictFoldable1.Foldable0())(splice)($48));
        };
    };
};

// | Creates a `NonEmptyString` from a `String`, returning `Nothing` if the
// | input is empty.
// |
// | ```purescript
// | fromString "" = Nothing
// | fromString "hello" = Just (NES.unsafeFromString "hello")
// | ```
var fromString = function (v) {
    if (v === "") {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just(v);
};

// | If the string starts with the given prefix, return the portion of the
// | string left after removing it. If the prefix does not match or there is no
// | remainder, the result will be `Nothing`.
// |
// | ```purescript
// | stripPrefix (Pattern "http:") (NonEmptyString "http://purescript.org") == Just (NonEmptyString "//purescript.org")
// | stripPrefix (Pattern "http:") (NonEmptyString "https://purescript.org") == Nothing
// | stripPrefix (Pattern "Hello!") (NonEmptyString "Hello!") == Nothing
// | ```
var stripPrefix = function (pat) {
    return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripPrefix(pat)));
};

// | If the string ends with the given suffix, return the portion of the
// | string left after removing it. If the suffix does not match or there is no
// | remainder, the result will be `Nothing`.
// |
// | ```purescript
// | stripSuffix (Pattern ".exe") (NonEmptyString "purs.exe") == Just (NonEmptyString "purs")
// | stripSuffix (Pattern ".exe") (NonEmptyString "purs") == Nothing
// | stripSuffix (Pattern "Hello!") (NonEmptyString "Hello!") == Nothing
// | ```
var stripSuffix = function (pat) {
    return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripSuffix(pat)));
};

// | Removes whitespace from the beginning and end of a string, including
// | [whitespace characters](http://www.ecma-international.org/ecma-262/5.1/#sec-7.2)
// | and [line terminators](http://www.ecma-international.org/ecma-262/5.1/#sec-7.3).
// | If the string is entirely made up of whitespace the result will be Nothing.
// |
// | ```purescript
// | trim (NonEmptyString "   Hello  \n World\n\t    ") == Just (NonEmptyString "Hello  \n World")
// | trim (NonEmptyString "   \n") == Nothing
// | ```
var trim = function (v) {
    return fromString(Data_String_Common.trim(v));
};

// | A partial version of `fromString`.
var unsafeFromString = function (dictPartial) {
    return function ($49) {
        return Data_Maybe.fromJust(dictPartial)(fromString($49));
    };
};
var eqNonEmptyString = Data_Eq.eqString;
var eqNonEmptyReplacement = eqNonEmptyString;

// | Checks whether the pattern appears in the given string.
// |
// | ```purescript
// | contains (Pattern "needle") (NonEmptyString "haystack with needle") == true
// | contains (Pattern "needle") (NonEmptyString "haystack") == false
// | ```
var contains = function ($50) {
    return liftS(Data_String_CodeUnits.contains($50));
};

// | Appends a string to this non-empty string. Since one of the strings is
// | non-empty we know the result will be too.
// |
// | ```purescript
// | appendString (NonEmptyString "Hello") " world" == NonEmptyString "Hello world"
// | appendString (NonEmptyString "Hello") "" == NonEmptyString "Hello"
// | ```
var appendString = function (v) {
    return function (s2) {
        return v + s2;
    };
};
module.exports = {
    nes: nes,
    NonEmptyString: NonEmptyString,
    MakeNonEmpty: MakeNonEmpty,
    NonEmptyReplacement: NonEmptyReplacement,
    fromString: fromString,
    unsafeFromString: unsafeFromString,
    toString: toString,
    appendString: appendString,
    prependString: prependString,
    stripPrefix: stripPrefix,
    stripSuffix: stripSuffix,
    contains: contains,
    localeCompare: localeCompare,
    replace: replace,
    replaceAll: replaceAll,
    toLower: toLower,
    toUpper: toUpper,
    trim: trim,
    joinWith: joinWith,
    join1With: join1With,
    joinWith1: joinWith1,
    liftS: liftS,
    eqNonEmptyString: eqNonEmptyString,
    ordNonEmptyString: ordNonEmptyString,
    semigroupNonEmptyString: semigroupNonEmptyString,
    showNonEmptyString: showNonEmptyString,
    makeNonEmptyBad: makeNonEmptyBad,
    nonEmptyNonEmpty: nonEmptyNonEmpty,
    eqNonEmptyReplacement: eqNonEmptyReplacement,
    ordNonEmptyReplacement: ordNonEmptyReplacement,
    semigroupNonEmptyReplacement: semigroupNonEmptyReplacement,
    showNonEmptyReplacement: showNonEmptyReplacement
};
