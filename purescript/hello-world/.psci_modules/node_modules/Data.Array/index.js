
// | Helper functions for working with immutable Javascript arrays.
// |
// | _Note_: Depending on your use-case, you may prefer to use `Data.List` or
// | `Data.Sequence` instead, which might give better performance for certain
// | use cases. This module is useful when integrating with JavaScript libraries
// | which use arrays, but immutable arrays are not a practical data structure
// | for many use cases due to their poor asymptotics.
// |
// | In addition to the functions in this module, Arrays have a number of
// | useful instances:
// |
// | * `Functor`, which provides `map :: forall a b. (a -> b) -> Array a ->
// |   Array b`
// | * `Apply`, which provides `(<*>) :: forall a b. Array (a -> b) -> Array a
// |   -> Array b`. This function works a bit like a Cartesian product; the
// |   result array is constructed by applying each function in the first
// |   array to each value in the second, so that the result array ends up with
// |   a length equal to the product of the two arguments' lengths.
// | * `Bind`, which provides `(>>=) :: forall a b. (a -> Array b) -> Array a
// |   -> Array b` (this is the same as `concatMap`).
// | * `Semigroup`, which provides `(<>) :: forall a. Array a -> Array a ->
// |   Array a`, for concatenating arrays.
// | * `Foldable`, which provides a slew of functions for *folding* (also known
// |   as *reducing*) arrays down to one value. For example,
// |   `Data.Foldable.or` tests whether an array of `Boolean` values contains
// |   at least one `true` value.
// | * `Traversable`, which provides the PureScript version of a for-loop,
// |   allowing you to STAI.iterate over an array and accumulate effects.
// |
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_ST = require("../Control.Monad.ST/index.js");
var Control_Monad_ST_Internal = require("../Control.Monad.ST.Internal/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Array_ST = require("../Data.Array.ST/index.js");
var Data_Array_ST_Iterator = require("../Data.Array.ST.Iterator/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Prelude = require("../Prelude/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

// | A generalization of `zipWith` which accumulates results in some
// | `Applicative` functor.
// |
// | ```purescript
// | sndChars = zipWithA (\a b -> charAt 2 (a <> b))
// | sndChars ["a", "b"] ["A", "B"] = Nothing -- since "aA" has no 3rd char
// | sndChars ["aa", "b"] ["AA", "BBB"] = Just ['A', 'B']
// | ```
// |
var zipWithA = function (dictApplicative) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
            };
        };
    };
};

// | Takes two arrays and returns an array of corresponding pairs.
// | If one input array is short, excess elements of the longer array are
// | discarded.
// |
// | ```purescript
// | zip [1, 2, 3] ["a", "b"] = [Tuple 1 "a", Tuple 2 "b"]
// | ```
// |
var zip = $foreign.zipWith(Data_Tuple.Tuple.create);

// | Change the elements at the specified indices in index/value pairs.
// | Out-of-bounds indices will have no effect.
// |
// | ```purescript
// | updates = [Tuple 0 "Hi", Tuple 2 "." , Tuple 10 "foobar"]
// |
// | updateAtIndices updates ["Hello", "World", "!"] = ["Hi", "World", "."]
// | ```
// |
var updateAtIndices = function (dictFoldable) {
    return function (us) {
        return function (xs) {
            return Control_Monad_ST_Internal.run(Data_Array_ST.withArray(function (res) {
                return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (v) {
                    return Data_Array_ST.poke(v.value0)(v.value1)(res);
                })(us);
            })(xs));
        };
    };
};

// | Change the element at the specified index, creating a new array, or
// | returning `Nothing` if the index is out of bounds.
// |
// | ```purescript
// | updateAt 1 "World" ["Hello", "Earth"] = Just ["Hello", "World"]
// | updateAt 10 "World" ["Hello", "Earth"] = Nothing
// | ```
// |
var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Find the element of an array at the specified index.
// |
// | ```purescript
// | unsafePartial $ unsafeIndex ["a", "b", "c"] 1 = "b"
// | ```
// |
// | Using `unsafeIndex` with an out-of-range index will not immediately raise a runtime error.
// | Instead, the result will be undefined. Most attempts to subsequently use the result will
// | cause a runtime error, of course, but this is not guaranteed, and is dependent on the backend;
// | some programs will continue to run as if nothing is wrong. For example, in the JavaScript backend,
// | the expression `unsafePartial (unsafeIndex [true] 1)` has type `Boolean`;
// | since this expression evaluates to `undefined`, attempting to use it in an `if` statement will cause
// | the else branch to be taken.
var unsafeIndex = function (dictPartial) {
    return $foreign.unsafeIndexImpl;
};

// | Break an array into its first element and remaining elements.
// |
// | Using `uncons` provides a way of writing code that would use cons patterns
// | in Haskell or pre-PureScript 0.7:
// | ``` purescript
// | f (x : xs) = something
// | f [] = somethingElse
// | ```
// | Becomes:
// | ``` purescript
// | f arr = case uncons arr of
// |   Just { head: x, tail: xs } -> something
// |   Nothing -> somethingElse
// | ```
var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
    return function (xs) {
        return new Data_Maybe.Just({
            head: x,
            tail: xs
        });
    };
});

// | Convert an `Array` into an `Unfoldable` structure.
var toUnfoldable = function (dictUnfoldable) {
    return function (xs) {
        var len = $foreign.length(xs);
        var f = function (i) {
            if (i < len) {
                return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.Array line 143, column 3 - line 145, column 26: " + [ i.constructor.name ]);
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
    };
};

// | Keep only a number of elements from the end of an array, creating a new
// | array.
// |
// | ```purescript
// | letters = ["a", "b", "c"]
// |
// | takeEnd 2 letters = ["b", "c"]
// | takeEnd 100 letters = ["a", "b", "c"]
// | ```
// |
var takeEnd = function (n) {
    return function (xs) {
        return $foreign.drop($foreign.length(xs) - n | 0)(xs);
    };
};

// | Get all but the first element of an array, creating a new array, or
// | `Nothing` if the array is empty
// |
// | ```purescript
// | tail [1, 2, 3, 4] = Just [2, 3, 4]
// | tail [] = Nothing
// | ```
// |
// | Running time: `O(n)` where `n` is the length of the array
var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
    return function (xs) {
        return new Data_Maybe.Just(xs);
    };
});

// | Sort the elements of an array in increasing order, where elements are
// | compared using the specified partial ordering, creating a new array.
// |
// | ```purescript
// | compareLength a b = compare (length a) (length b)
// | sortBy compareLength [[1, 2, 3], [7, 9], [-2]] = [[-2],[7,9],[1,2,3]]
// | ```
// |
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var v = comp(x)(y);
                if (v instanceof Data_Ordering.GT) {
                    return 1;
                };
                if (v instanceof Data_Ordering.EQ) {
                    return 0;
                };
                if (v instanceof Data_Ordering.LT) {
                    return -1 | 0;
                };
                throw new Error("Failed pattern match at Data.Array line 702, column 15 - line 707, column 1: " + [ v.constructor.name ]);
            };
        };
        return $foreign.sortImpl(comp$prime)(xs);
    };
};

// | Sort the elements of an array in increasing order, where elements are
// | sorted based on a projection
// |
// | ```purescript
// | sortWith (_.age) [{name: "Alice", age: 42}, {name: "Bob", age: 21}]
// |    = [{name: "Bob", age: 21}, {name: "Alice", age: 42}]
// | ```
// |
var sortWith = function (dictOrd) {
    return function (f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
    };
};

//------------------------------------------------------------------------------
// Sorting ---------------------------------------------------------------------
//------------------------------------------------------------------------------
// | Sort the elements of an array in increasing order, creating a new array.
// |
// | ```purescript
// | sort [2, -3, 1] = [-3, 1, 2]
// | ```
// |
var sort = function (dictOrd) {
    return function (xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
    };
};

// | Create an array of one element
// | ```purescript
// | singleton 2 = [2]
// | ```
var singleton = function (a) {
    return [ a ];
};

//------------------------------------------------------------------------------
// Array size ------------------------------------------------------------------
//------------------------------------------------------------------------------
// | Test whether an array is empty.
// | ```purescript
// | null [] = true
// | null [1, 2] = false
// | ```
var $$null = function (xs) {
    return $foreign.length(xs) === 0;
};

// | Remove the duplicates from an array, where element equality is determined
// | by the specified equivalence relation, creating a new array.
// |
// | This less efficient version of `nubBy` only requires an equivalence
// | relation.
// |
// | ```purescript
// | nubByEq (\a b -> a `mod` 3 == b `mod` 3) [1, 3, 4, 5, 6] = [1,3,5]
// | ```
// |
var nubByEq = function (eq) {
    return function (xs) {
        var v = uncons(xs);
        if (v instanceof Data_Maybe.Just) {
            return $foreign.cons(v.value0.head)(nubByEq(eq)($foreign.filter(function (y) {
                return !eq(v.value0.head)(y);
            })(v.value0.tail)));
        };
        if (v instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        throw new Error("Failed pattern match at Data.Array line 929, column 3 - line 931, column 18: " + [ v.constructor.name ]);
    };
};

// | Remove the duplicates from an array, creating a new array.
// |
// | This less efficient version of `nub` only requires an `Eq` instance.
// |
// | ```purescript
// | nubEq [1, 2, 1, 3, 3] = [1, 2, 3]
// | ```
// |
var nubEq = function (dictEq) {
    return nubByEq(Data_Eq.eq(dictEq));
};

// | Apply a function to the element at the specified indices,
// | creating a new array. Out-of-bounds indices will have no effect.
// |
// | ```purescript
// | indices = [1, 3]
// | modifyAtIndices indices toUpper ["Hello", "World", "and", "others"]
// |    = ["Hello", "WORLD", "and", "OTHERS"]
// | ```
// |
var modifyAtIndices = function (dictFoldable) {
    return function (is) {
        return function (f) {
            return function (xs) {
                return Control_Monad_ST_Internal.run(Data_Array_ST.withArray(function (res) {
                    return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function (i) {
                        return Data_Array_ST.modify(i)(f)(res);
                    })(is);
                })(xs));
            };
        };
    };
};

// | Apply a function to each element in an array, supplying a generated
// | zero-based index integer along with the element, creating an array
// | with the new elements.
// |
// | ```purescript
// | prefixIndex index element = show index <> element
// |
// | mapWithIndex prefixIndex ["Hello", "World"] = ["0Hello", "1World"]
// | ```
// |
var mapWithIndex = function (f) {
    return function (xs) {
        return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
    };
};

// | Attempt a computation multiple times, requiring at least one success.
// |
// | The `Lazy` constraint is used to generate the result lazily, to ensure
// | termination.
var some = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                return many(dictAlternative)(dictLazy)(v);
            }));
        };
    };
};

// | Attempt a computation multiple times, returning as many successful results
// | as possible (possibly zero).
// |
// | The `Lazy` constraint is used to generate the result lazily, to ensure
// | termination.
var many = function (dictAlternative) {
    return function (dictLazy) {
        return function (v) {
            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
        };
    };
};

// | Insert an element at the specified index, creating a new array, or
// | returning `Nothing` if the index is out of bounds.
// |
// | ```purescript
// | insertAt 2 "!" ["Hello", "World"] = Just ["Hello", "World", "!"]
// | insertAt 10 "!" ["Hello"] = Nothing
// | ```
// |
var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Get all but the last element of an array, creating a new array, or
// | `Nothing` if the array is empty.
// |
// | ```purescript
// | init [1, 2, 3, 4] = Just [1, 2, 3]
// | init [] = Nothing
// | ```
// |
// | Running time: `O(n)` where `n` is the length of the array
var init = function (xs) {
    if ($$null(xs)) {
        return Data_Maybe.Nothing.value;
    };
    if (Data_Boolean.otherwise) {
        return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
    };
    throw new Error("Failed pattern match at Data.Array line 323, column 1 - line 323, column 45: " + [ xs.constructor.name ]);
};

//------------------------------------------------------------------------------
// Indexed operations ----------------------------------------------------------
//------------------------------------------------------------------------------
// | This function provides a safe way to read a value at a particular index
// | from an array.
// |
// | ```purescript
// | sentence = ["Hello", "World", "!"]
// |
// | index sentence 0 = Just "Hello"
// | index sentence 7 = Nothing
// | ```
// |
var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Get the last element in an array, or `Nothing` if the array is empty
// |
// | Running time: `O(1)`.
// |
// | ```purescript
// | last [1, 2] = Just 2
// | last [] = Nothing
// | ```
// |
var last = function (xs) {
    return index(xs)($foreign.length(xs) - 1 | 0);
};

// | Break an array into its last element and all preceding elements.
// |
// | ```purescript
// | unsnoc [1, 2, 3] = Just {init: [1, 2], last: 3}
// | unsnoc [] = Nothing
// | ```
// |
// | Running time: `O(n)` where `n` is the length of the array
var unsnoc = function (xs) {
    return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
        return function (v1) {
            return {
                init: v,
                last: v1
            };
        };
    })(init(xs)))(last(xs));
};

// | Apply a function to the element at the specified index, creating a new
// | array, or returning `Nothing` if the index is out of bounds.
// |
// | ```purescript
// | modifyAt 1 toUpper ["Hello", "World"] = Just ["Hello", "WORLD"]
// | modifyAt 10 toUpper ["Hello", "World"] = Nothing
// | ```
// |
var modifyAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                return updateAt(i)(f(x))(xs);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};

// | Split an array into two parts:
// |
// | 1. the longest initial subarray for which all elements satisfy the
// |    specified predicate
// | 2. the remaining elements
// |
// | ```purescript
// | span (\n -> n % 2 == 1) [1,3,2,4,5] == { init: [1,3], rest: [2,4,5] }
// | ```
// |
// | Running time: `O(n)`.
var span = function (p) {
    return function (arr) {
        var go = function ($copy_i) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i) {
                var v = index(arr)(i);
                if (v instanceof Data_Maybe.Just) {
                    var $75 = p(v.value0);
                    if ($75) {
                        $copy_i = i + 1 | 0;
                        return;
                    };
                    $tco_done = true;
                    return new Data_Maybe.Just(i);
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.Array line 834, column 5 - line 836, column 25: " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($copy_i);
            };
            return $tco_result;
        };
        var breakIndex = go(0);
        if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
            return {
                init: [  ],
                rest: arr
            };
        };
        if (breakIndex instanceof Data_Maybe.Just) {
            return {
                init: $foreign.slice(0)(breakIndex.value0)(arr),
                rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
            };
        };
        if (breakIndex instanceof Data_Maybe.Nothing) {
            return {
                init: arr,
                rest: [  ]
            };
        };
        throw new Error("Failed pattern match at Data.Array line 821, column 3 - line 827, column 30: " + [ breakIndex.constructor.name ]);
    };
};

// | Calculate the longest initial subarray for which all element satisfy the
// | specified predicate, creating a new array.
// |
// | ```purescript
// | takeWhile (_ > 0) [4, 1, 0, -4, 5] = [4, 1]
// | takeWhile (_ > 0) [-1, 4] = []
// | ```
// |
var takeWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).init;
    };
};

// | Transforms an array of pairs into an array of first components and an
// | array of second components.
// |
// | ```purescript
// | unzip [Tuple 1 "a", Tuple 2 "b"] = Tuple [1, 2] ["a", "b"]
// | ```
// |
var unzip = function (xs) {
    return Control_Monad_ST_Internal.run(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v) {
        return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v1) {
            return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterator(function (v2) {
                return index(xs)(v2);
            }))(function (v2) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterate(v2)(function (v3) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v3.value0)(v)))(function () {
                        return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v3.value1)(v1));
                    });
                }))(function () {
                    return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.unsafeFreeze(v))(function (v3) {
                        return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.unsafeFreeze(v1))(function (v4) {
                            return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Data_Tuple.Tuple(v3, v4));
                        });
                    });
                });
            });
        });
    }));
};

//------------------------------------------------------------------------------
// Non-indexed reads -----------------------------------------------------------
//------------------------------------------------------------------------------
// | Get the first element in an array, or `Nothing` if the array is empty
// |
// | Running time: `O(1)`.
// |
// | ```purescript
// | head [1, 2] = Just 1
// | head [] = Nothing
// | ```
// |
var head = function (xs) {
    return index(xs)(0);
};

// | Remove the duplicates from an array, where element equality is determined
// | by the specified ordering, creating a new array.
// |
// | ```purescript
// | nubBy compare [1, 3, 4, 2, 2, 1] == [1, 3, 4, 2]
// | ```
// |
var nubBy = function (comp) {
    return function (xs) {
        var indexedAndSorted = sortBy(function (x) {
            return function (y) {
                return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
            };
        })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
        var v = head(indexedAndSorted);
        if (v instanceof Data_Maybe.Nothing) {
            return [  ];
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)(Control_Monad_ST_Internal.run(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.unsafeThaw(singleton(v.value0)))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v2) {
                    return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Functor.map(Control_Monad_ST_Internal.functorST)(function ($111) {
                        return Data_Tuple.snd((function ($112) {
                            return Data_Maybe.fromJust()(last($112));
                        })($111));
                    })(Data_Array_ST.unsafeFreeze(v1)))(function (v3) {
                        return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(v3)(v2.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v2)(v1)));
                    });
                }))(function () {
                    return Data_Array_ST.unsafeFreeze(v1);
                });
            }))));
        };
        throw new Error("Failed pattern match at Data.Array line 903, column 17 - line 911, column 29: " + [ v.constructor.name ]);
    };
};

// | Remove the duplicates from an array, creating a new array.
// |
// | ```purescript
// | nub [1, 2, 1, 3, 3] = [1, 2, 3]
// | ```
// |
var nub = function (dictOrd) {
    return nubBy(Data_Ord.compare(dictOrd));
};

// | Group equal, consecutive elements of an array into arrays, using the
// | specified equivalence relation to detemine equality.
// |
// | ```purescript
// | groupBy (\a b -> odd a && odd b) [1, 3, 2, 4, 3, 3]
// |    = [NonEmpty 1 [3], NonEmpty 2 [] , NonEmpty 4 [], NonEmpty 3 [3]]
// | ```
// |
var groupBy = function (op) {
    return function (xs) {
        return Control_Monad_ST_Internal.run(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v) {
            return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterator(function (v1) {
                return index(xs)(v1);
            }))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterate(v1)(function (x) {
                    return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v2) {
                        return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.push(x)(v2))(function (v3) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.pushWhile(op(x))(v1)(v2))(function () {
                                return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.unsafeFreeze(v2))(function (v4) {
                                    return Data_Array_ST.push(v4)(v);
                                });
                            });
                        });
                    }));
                }))(function () {
                    return Data_Array_ST.unsafeFreeze(v);
                });
            });
        }));
    };
};

// | Group equal, consecutive elements of an array into arrays.
// |
// | ```purescript
// | group [1,1,2,2,1] == [NonEmpty 1 [1], NonEmpty 2 [2], NonEmpty 1 []]
// | ```
var group = function (dictEq) {
    return function (xs) {
        return groupBy(Data_Eq.eq(dictEq))(xs);
    };
};

// | Sort and then group the elements of an array into arrays.
// |
// | ```purescript
// | group' [1,1,2,2,1] == [NonEmpty 1 [1,1],NonEmpty 2 [2]]
// | ```
var group$prime = function (dictOrd) {
    return function ($113) {
        return group(dictOrd.Eq0())(sort(dictOrd)($113));
    };
};

// | Convert a `Foldable` structure into an `Array`.
// |
// | ```purescript
// | fromFoldable (Just 1) = [1]
// | fromFoldable (Nothing) = []
// | ```
// |
var fromFoldable = function (dictFoldable) {
    return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
};
var foldRecM = function (dictMonadRec) {
    return function (f) {
        return function (a) {
            return function (array) {
                var go = function (res) {
                    return function (i) {
                        if (i >= $foreign.length(array)) {
                            return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(res));
                        };
                        if (Data_Boolean.otherwise) {
                            return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(res)(unsafeIndex()(array)(i)))(function (v) {
                                return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                    a: v,
                                    b: i + 1 | 0
                                }));
                            });
                        };
                        throw new Error("Failed pattern match at Data.Array line 1098, column 3 - line 1102, column 42: " + [ res.constructor.name, i.constructor.name ]);
                    };
                };
                return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
            };
        };
    };
};

// | Perform a fold using a monadic step function.
// |
// | ```purescript
// | foldM (\x y -> Just (x + y)) 0 [1, 4] = Just 5
// | ```
// |
var foldM = function (dictMonad) {
    return function (f) {
        return function (a) {
            return $foreign["uncons'"](function (v) {
                return Control_Applicative.pure(dictMonad.Applicative0())(a);
            })(function (b) {
                return function (bs) {
                    return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                        return foldM(dictMonad)(f)(a$prime)(bs);
                    });
                };
            });
        };
    };
};

// | Find the last index for which a predicate holds.
// |
// | ```purescript
// | findLastIndex (contains $ Pattern "b") ["a", "bb", "b", "d"] = Just 2
// | findLastIndex (contains $ Pattern "x") ["a", "bb", "b", "d"] = Nothing
// | ```
// |
var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Insert an element into a sorted array, using the specified function to
// | determine the ordering of elements.
// |
// | ```purescript
// | invertCompare a b = invert $ compare a b
// |
// | insertBy invertCompare 10 [21, 20, 2, 1] = [21, 20, 10, 2, 1]
// | ```
// |
var insertBy = function (cmp) {
    return function (x) {
        return function (ys) {
            var i = Data_Maybe.maybe(0)(function (v) {
                return v + 1 | 0;
            })(findLastIndex(function (y) {
                return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
            })(ys));
            return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
        };
    };
};

// | Insert an element into a sorted array.
// |
// | ```purescript
// | insert 10 [1, 2, 20, 21] = [1, 2, 10, 20, 21]
// | ```
// |
var insert = function (dictOrd) {
    return insertBy(Data_Ord.compare(dictOrd));
};

// | Find the first index for which a predicate holds.
// |
// | ```purescript
// | findIndex (contains $ Pattern "b") ["a", "bb", "b", "d"] = Just 1
// | findIndex (contains $ Pattern "x") ["a", "bb", "b", "d"] = Nothing
// | ```
// |
var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Calculate the intersection of two arrays, using the specified equivalence
// | relation to compare elements, creating a new array. Note that duplicates
// | in the first array are preserved while duplicates in the second array are
// | removed.
// |
// | ```purescript
// | mod3eq a b = a `mod` 3 == b `mod` 3
// | intersectBy mod3eq [1, 2, 3] [4, 6, 7] = [1, 3]
// | ```
// |
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return $foreign.filter(function (x) {
                return Data_Maybe.isJust(findIndex(eq(x))(ys));
            })(xs);
        };
    };
};

// | Calculate the intersection of two arrays, creating a new array. Note that
// | duplicates in the first array are preserved while duplicates in the second
// | array are removed.
// |
// | ```purescript
// | intersect [1, 1, 2] [2, 2, 1] = [1, 1, 2]
// | ```
// |
var intersect = function (dictEq) {
    return intersectBy(Data_Eq.eq(dictEq));
};

// | Find the index of the last element equal to the specified element.
// |
// | ```purescript
// | elemLastIndex "a" ["a", "b", "a", "c"] = Just 2
// | elemLastIndex "Earth" ["Hello", "World", "!"] = Nothing
// | ```
// |
var elemLastIndex = function (dictEq) {
    return function (x) {
        return findLastIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};

// | Find the index of the first element equal to the specified element.
// |
// | ```purescript
// | elemIndex "a" ["a", "b", "a", "c"] = Just 0
// | elemIndex "Earth" ["Hello", "World", "!"] = Nothing
// | ```
// |
var elemIndex = function (dictEq) {
    return function (x) {
        return findIndex(function (v) {
            return Data_Eq.eq(dictEq)(v)(x);
        });
    };
};

// | Remove the longest initial subarray for which all element satisfy the
// | specified predicate, creating a new array.
// |
// | ```purescript
// | dropWhile (_ < 0) [-3, -1, 0, 4, -6] = [0, 4, -6]
// | ```
// |
var dropWhile = function (p) {
    return function (xs) {
        return (span(p)(xs)).rest;
    };
};

// | Drop a number of elements from the end of an array, creating a new array.
// |
// | ```purescript
// | letters = ["a", "b", "c", "d"]
// |
// | dropEnd 2 letters = ["a", "b"]
// | dropEnd 10 letters = []
// | ```
// |
var dropEnd = function (n) {
    return function (xs) {
        return $foreign.take($foreign.length(xs) - n | 0)(xs);
    };
};

// | Delete the element at the specified index, creating a new array, or
// | returning `Nothing` if the index is out of bounds.
// |
// | ```purescript
// | deleteAt 0 ["Hello", "World"] = Just ["World"]
// | deleteAt 10 ["Hello", "World"] = Nothing
// | ```
// |
var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

// | Delete the first element of an array which matches the specified value,
// | under the equivalence relation provided in the first argument, creating a
// | new array.
// |
// | ```purescript
// | mod3eq a b = a `mod` 3 == b `mod` 3
// | deleteBy mod3eq 6 [1, 3, 4, 3] = [1, 4, 3]
// | ```
// |
var deleteBy = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2.length === 0) {
                return [  ];
            };
            return Data_Maybe.maybe(v2)(function (i) {
                return Data_Maybe.fromJust()(deleteAt(i)(v2));
            })(findIndex(v(v1))(v2));
        };
    };
};

// | Calculate the union of two arrays, using the specified function to
// | determine equality of elements. Note that duplicates in the first array
// | are preserved while duplicates in the second array are removed.
// |
// | ```purescript
// | mod3eq a b = a `mod` 3 == b `mod` 3
// | unionBy mod3eq [1, 5, 1, 2] [3, 4, 3, 3] = [1, 5, 1, 2, 3]
// | ```
// |
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
        };
    };
};

// | Calculate the union of two arrays. Note that duplicates in the first array
// | are preserved while duplicates in the second array are removed.
// |
// | Running time: `O(n^2)`
// |
// | ```purescript
// | union [1, 2, 1, 1] [3, 3, 3, 4] = [1, 2, 1, 1, 3, 4]
// | ```
// |
var union = function (dictEq) {
    return unionBy(Data_Eq.eq(dictEq));
};

// | Delete the first element of an array which is equal to the specified value,
// | creating a new array.
// |
// | ```purescript
// | delete 7 [1, 7, 3, 7] = [1, 3, 7]
// | delete 7 [1, 2, 3] = [1, 2, 3]
// | ```
// |
// | Running time: `O(n)`
var $$delete = function (dictEq) {
    return deleteBy(Data_Eq.eq(dictEq));
};

// | Delete the first occurrence of each element in the second array from the
// | first array, creating a new array.
// |
// | ```purescript
// | difference [2, 1] [2, 3] = [1]
// | ```
// |
// | Running time: `O(n*m)`, where n is the length of the first array, and m is
// | the length of the second.
var difference = function (dictEq) {
    return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
};

// | Apply a function to each element in an array, and flatten the results
// | into a single, new array.
// |
// | ```purescript
// | concatMap (split $ Pattern " ") ["Hello World", "other thing"]
// |    = ["Hello", "World", "other", "thing"]
// | ```
// |
var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));

// | Apply a function to each element in an array, keeping only the results
// | which contain a value, creating a new array.
// |
// | ```purescript
// | parseEmail :: String -> Maybe Email
// | parseEmail = ...
// |
// | mapMaybe parseEmail ["a.com", "hello@example.com", "--"]
// |    = [Email {user: "hello", domain: "example.com"}]
// | ```
// |
var mapMaybe = function (f) {
    return concatMap(function ($114) {
        return Data_Maybe.maybe([  ])(singleton)(f($114));
    });
};

// | Filter where the predicate returns a `Boolean` in some `Applicative`.
// |
// | ```purescript
// | powerSet :: forall a. Array a -> Array (Array a)
// | powerSet = filterA (const [true, false])
// | ```
var filterA = function (dictApplicative) {
    return function (p) {
        return function ($115) {
            return Data_Functor.map((dictApplicative.Apply0()).Functor0())(mapMaybe(function (v) {
                if (v.value1) {
                    return new Data_Maybe.Just(v.value0);
                };
                return Data_Maybe.Nothing.value;
            }))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(x))(p(x));
            })($115));
        };
    };
};

// | Filter an array of optional values, keeping only the elements which contain
// | a value, creating a new array.
// |
// | ```purescript
// | catMaybes [Nothing, Just 2, Nothing, Just 4] = [2, 4]
// | ```
// |
var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));

// | Update or delete the element at the specified index by applying a
// | function to the current value, returning a new array or `Nothing` if the
// | index is out-of-bounds.
// |
// | ```purescript
// | alterAt 1 (stripSuffix $ Pattern "!") ["Hello", "World!"]
// |    = Just ["Hello", "World"]
// |
// | alterAt 1 (stripSuffix $ Pattern "!!!!!") ["Hello", "World!"]
// |    = Just ["Hello"]
// |
// | alterAt 10 (stripSuffix $ Pattern "!") ["Hello", "World!"] = Nothing
// | ```
// |
var alterAt = function (i) {
    return function (f) {
        return function (xs) {
            var go = function (x) {
                var v = f(x);
                if (v instanceof Data_Maybe.Nothing) {
                    return deleteAt(i)(xs);
                };
                if (v instanceof Data_Maybe.Just) {
                    return updateAt(i)(v.value0)(xs);
                };
                throw new Error("Failed pattern match at Data.Array line 544, column 10 - line 546, column 32: " + [ v.constructor.name ]);
            };
            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
    };
};
module.exports = {
    fromFoldable: fromFoldable,
    toUnfoldable: toUnfoldable,
    singleton: singleton,
    some: some,
    many: many,
    "null": $$null,
    insert: insert,
    insertBy: insertBy,
    head: head,
    last: last,
    tail: tail,
    init: init,
    uncons: uncons,
    unsnoc: unsnoc,
    index: index,
    elemIndex: elemIndex,
    elemLastIndex: elemLastIndex,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    insertAt: insertAt,
    deleteAt: deleteAt,
    updateAt: updateAt,
    updateAtIndices: updateAtIndices,
    modifyAt: modifyAt,
    modifyAtIndices: modifyAtIndices,
    alterAt: alterAt,
    concatMap: concatMap,
    filterA: filterA,
    mapMaybe: mapMaybe,
    catMaybes: catMaybes,
    mapWithIndex: mapWithIndex,
    sort: sort,
    sortBy: sortBy,
    sortWith: sortWith,
    takeEnd: takeEnd,
    takeWhile: takeWhile,
    dropEnd: dropEnd,
    dropWhile: dropWhile,
    span: span,
    group: group,
    "group'": group$prime,
    groupBy: groupBy,
    nub: nub,
    nubEq: nubEq,
    nubBy: nubBy,
    nubByEq: nubByEq,
    union: union,
    unionBy: unionBy,
    "delete": $$delete,
    deleteBy: deleteBy,
    difference: difference,
    intersect: intersect,
    intersectBy: intersectBy,
    zipWithA: zipWithA,
    zip: zip,
    unzip: unzip,
    foldM: foldM,
    foldRecM: foldRecM,
    unsafeIndex: unsafeIndex,
    range: $foreign.range,
    replicate: $foreign.replicate,
    length: $foreign.length,
    cons: $foreign.cons,
    snoc: $foreign.snoc,
    reverse: $foreign.reverse,
    concat: $foreign.concat,
    filter: $foreign.filter,
    partition: $foreign.partition,
    slice: $foreign.slice,
    take: $foreign.take,
    drop: $foreign.drop,
    zipWith: $foreign.zipWith
};
