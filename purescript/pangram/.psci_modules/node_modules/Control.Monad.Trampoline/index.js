
// | A _trampoline_ monad, which can be used at the bottom of
// | a monad transformer stack to avoid stack overflows in large
// | monadic computations.
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Prelude = require("../Prelude/index.js");

// | Run a computation in the `Trampoline` monad.
var runTrampoline = Control_Monad_Free.runFree(Data_Functor.functorFn)(function (v) {
    return v(Data_Unit.unit);
});

// | Return a value immediately
var done = Control_Applicative.pure(Control_Monad_Free.freeApplicative);

// | Use the `Trampoline` monad to represent the delayed evaluation of a value.
var delay = Control_Monad_Free.liftF;
module.exports = {
    done: done,
    delay: delay,
    runTrampoline: runTrampoline
};
