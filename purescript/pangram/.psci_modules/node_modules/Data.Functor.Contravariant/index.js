"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Void = require("../Data.Void/index.js");
var Prelude = require("../Prelude/index.js");

// | A `Contravariant` functor can be seen as a way of changing the input type
// | of a consumer of input, in contrast to the standard covariant `Functor`
// | that can be seen as a way of changing the output type of a producer of
// | output.
// |
// | `Contravariant` instances should satisfy the following laws:
// |
// | - Identity `cmap id = id`
// | - Composition `cmap f <<< cmap g = cmap (g <<< f)`
var Contravariant = function (cmap) {
    this.cmap = cmap;
};
var cmap = function (dict) {
    return dict.cmap;
};

// | `cmapFlipped` is `cmap` with its arguments reversed.
var cmapFlipped = function (dictContravariant) {
    return function (x) {
        return function (f) {
            return cmap(dictContravariant)(f)(x);
        };
    };
};
var coerce = function (dictContravariant) {
    return function (dictFunctor) {
        return function (a) {
            return Data_Functor.map(dictFunctor)(Data_Void.absurd)(cmap(dictContravariant)(Data_Void.absurd)(a));
        };
    };
};

// | As all `Contravariant` functors are also trivially `Invariant`, this function can be used as the `imap` implementation for any types that have an existing `Contravariant` instance.
var imapC = function (dictContravariant) {
    return function (v) {
        return function (f) {
            return cmap(dictContravariant)(f);
        };
    };
};
module.exports = {
    cmap: cmap,
    Contravariant: Contravariant,
    cmapFlipped: cmapFlipped,
    coerce: coerce,
    imapC: imapC
};
