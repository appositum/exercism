
// | This module defines the `ComonadEnv` type class and its instances.
"use strict";
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");

// | The `ComonadEnv` type class represents those comonads which support a
// | global environment that can be provided via the `ask` function.
// |
// | An implementation is provided for `EnvT`.
var ComonadAsk = function (Comonad0, ask) {
    this.Comonad0 = Comonad0;
    this.ask = ask;
};

// | The `ComonadEnv` type class extends `ComonadAsk` with a function
// | `local f x` that allows the value of the local context to be modified for
// | the duration of the execution of action `x`.
// |
// | An implementation is provided for `EnvT`.
// |
// | Laws:
// |
// | - `ask (local f x) = f (ask x)`
// | - `extract (local _ x) = extract a`
// | - `extend g (local f x) = extend (g <<< local f) x`
var ComonadEnv = function (ComonadAsk0, local) {
    this.ComonadAsk0 = ComonadAsk0;
    this.local = local;
};
var local = function (dict) {
    return dict.local;
};
var comonadAskTuple = new ComonadAsk(function () {
    return Data_Tuple.comonadTuple;
}, Data_Tuple.fst);
var comonadEnvTuple = new ComonadEnv(function () {
    return comonadAskTuple;
}, function (f) {
    return function (v) {
        return new Data_Tuple.Tuple(f(v.value0), v.value1);
    };
});
var comonadAskEnvT = function (dictComonad) {
    return new ComonadAsk(function () {
        return Control_Comonad_Env_Trans.comonadEnvT(dictComonad);
    }, function (v) {
        return Data_Tuple.fst(v);
    });
};
var comonadEnvEnvT = function (dictComonad) {
    return new ComonadEnv(function () {
        return comonadAskEnvT(dictComonad);
    }, function (f) {
        return function (v) {
            return new Data_Tuple.Tuple(f(v.value0), v.value1);
        };
    });
};
var ask = function (dict) {
    return dict.ask;
};

// | Get a value which depends on the environment.
var asks = function (dictComonadEnv) {
    return function (f) {
        return function (x) {
            return f(ask(dictComonadEnv.ComonadAsk0())(x));
        };
    };
};
module.exports = {
    ask: ask,
    local: local,
    ComonadAsk: ComonadAsk,
    asks: asks,
    ComonadEnv: ComonadEnv,
    comonadAskTuple: comonadAskTuple,
    comonadEnvTuple: comonadEnvTuple,
    comonadAskEnvT: comonadAskEnvT,
    comonadEnvEnvT: comonadEnvEnvT
};
