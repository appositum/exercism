
// | This module defines the `MonadReader` type class and its instances.
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Prelude = require("../Prelude/index.js");

// | The `MonadAsk` type class represents those monads which support a global
// | context that can be provided via the `ask` function.
// |
// | An implementation is provided for `ReaderT`, and for other monad
// | transformers defined in this library.
// |
// | Law:
// |
// | - `do { ask ; ask } = ask`
var MonadAsk = function (Monad0, ask) {
    this.Monad0 = Monad0;
    this.ask = ask;
};

// | An extension of the `MonadAsk` class that introduces a function `local f x`
// | that allows the value of the local context to be modified for the duration
// | of the execution of action `x`.
// |
// | An implementation is provided for `ReaderT`, and for other monad
// | transformers defined in this library.
// |
// | Laws in addition to the `MonadAsk` law:
// |
// | - `local f ask = f <$> ask`
// | - `local _ (pure a) = pure a`
// | - `local f (do { a <- x ; y }) = do { a <- local f x ; local f y }`
var MonadReader = function (MonadAsk0, local) {
    this.MonadAsk0 = MonadAsk0;
    this.local = local;
};
var monadAskFun = new MonadAsk(function () {
    return Control_Monad.monadFn;
}, Control_Category.identity(Control_Category.categoryFn));
var monadReaderFun = new MonadReader(function () {
    return monadAskFun;
}, Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));
var local = function (dict) {
    return dict.local;
};
var ask = function (dict) {
    return dict.ask;
};

// | Projects a value from the global context in a `MonadAsk`.
var asks = function (dictMonadAsk) {
    return function (f) {
        return Data_Functor.map((((dictMonadAsk.Monad0()).Bind1()).Apply0()).Functor0())(f)(ask(dictMonadAsk));
    };
};
module.exports = {
    ask: ask,
    local: local,
    MonadAsk: MonadAsk,
    asks: asks,
    MonadReader: MonadReader,
    monadAskFun: monadAskFun,
    monadReaderFun: monadReaderFun
};
