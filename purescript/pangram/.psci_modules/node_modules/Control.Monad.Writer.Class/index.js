
// | This module defines the `MonadWriter` type class and its instances.
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Prelude = require("../Prelude/index.js");

// | The `MonadTell w` type class represents those monads which support a
// | monoidal accumulator of type `w`, were `tell` appends a value to the
// | accumulator.
// |
// | An implementation is provided for `WriterT`, and for other monad
// | transformers defined in this library.
// |
// | Law:
// |
// | - `do { tell x ; tell y } = tell (x <> y)`
var MonadTell = function (Monad0, tell) {
    this.Monad0 = Monad0;
    this.tell = tell;
};

// | An extension of the `MonadTell` class that introduces some operations on
// | the accumulator:
// |
// | - `listen` modifies the result to include the changes to the accumulator.
// | - `pass` applies the returned function to the accumulator.
// |
// | An implementation is provided for `WriterT`, and for other monad
// | transformers defined in this library.
// |
// | Laws in addition to the `MonadTell` law:
// |
// | - `do { tell x ; tell y } = tell (x <> y)`
// | - `listen (pure a) = pure (Tuple a mempty)`
// | - `listen (writer a x) = tell x $> Tuple a x`
var MonadWriter = function (MonadTell0, listen, pass) {
    this.MonadTell0 = MonadTell0;
    this.listen = listen;
    this.pass = pass;
};
var tell = function (dict) {
    return dict.tell;
};
var pass = function (dict) {
    return dict.pass;
};
var listen = function (dict) {
    return dict.listen;
};

// | Projects a value from modifications made to the accumulator during an
// | action.
var listens = function (dictMonadWriter) {
    return function (f) {
        return function (m) {
            return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(listen(dictMonadWriter)(m))(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
            });
        };
    };
};

// | Modify the final accumulator value by applying a function.
var censor = function (dictMonadWriter) {
    return function (f) {
        return function (m) {
            return pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
                return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(v, f));
            }));
        };
    };
};
module.exports = {
    listen: listen,
    pass: pass,
    tell: tell,
    MonadTell: MonadTell,
    MonadWriter: MonadWriter,
    listens: listens,
    censor: censor
};
